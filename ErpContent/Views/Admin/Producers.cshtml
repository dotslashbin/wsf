@{
    ViewBag.Title = "Producers";
   ViewBag.PageTitle = "ADMIN DASHBOARD: Producers";
    Layout = "~/Views/Shared/_LayoutBootstrap.cshtml";
}


@section LeftMenu{
   @Html.Partial("_AdminMenuPartial")
 }




<div data-bind="template: { name: mv().view, data: mv().model, afterRender: $root.modelInit } ">
... loading
</div>

<div id="dialog-placeholder" 
    data-bind="template: { name: dmv().view, data: dmv().model, afterRender: $root.dialogInit }">
</div>

<div id="error-dialog-placeholder" 
    data-bind="  template: { name: dmvError().view, data: dmvError().model, afterRender: $root.errorDialogInit }">
</div>



@section scripts {

    <script  src="~/Scripts/models/TastingNoteModel.js"></script>
    <script  src="~/Scripts/models/PageDataModel.js"></script>


    <script id="producer-notes-template" type="text/html">
            <div class="row">
                <div class='col-sm-1'>
                      <span data-bind="click: edit" class='glyphicon glyphicon-pencil' style="cursor:pointer" title="Start editing"></span>
                </div>  
            </div>

            <div class="row">
                <div class='col-sm-2' data-bind="style: { color: erp.utils.statusColor($data.wfState()) }">
                      Name
                </div>
                <div class='col-sm-10' data-bind="style: { color: erp.utils.statusColor($data.wfState()) }">
                      <span data-bind="text: name"></span>
                </div>
            </div>

            <div class="row">
                <div class='col-sm-2' data-bind="style: { color: erp.utils.statusColor($data.wfState()) }">
                      Name To Show
                </div>
                <div class='col-sm-10' data-bind="style: { color: erp.utils.statusColor($data.wfState()) }">
                      <span data-bind="text: nameToShow"></span>
                </div>
            </div>
            <div class="row">
                <div class='col-sm-2' data-bind="style: { color: erp.utils.statusColor($data.wfState()) }">
                      Number of notes
                </div>
                <div class='col-sm-10' data-bind="style: { color: erp.utils.statusColor($data.wfState()) }">
                      <span data-bind="text: notes().length"></span>
                </div>
            </div>

            <br />
            <div style="max-height:650px; overflow:auto; border-bottom: solid 1px gray;"">
            <!-- ko foreach: notes -->
            <div class="well well-sm row">

                <div class="row">
                    <div class="col-sm-1">
                        <span data-bind="click: editNote" class='glyphicon glyphicon-pencil' style="cursor:pointer" title="Start editing"></span>&nbsp;
                    </div>
                    <div class="col-sm-11">
                                <b>
                                    <span data-bind="text: vintage"></span>&nbsp;
                                    <span data-bind="text: producer"></span>
                                    <span data-bind="text: wineName().length == 0 ? '' : ', ' + wineName()"/>
                                </b>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-1">&nbsp;
                    </div>
                    <div class="col-sm-11">
                                <b>
                                    <span data-bind="text: country"/>
                                    <span data-bind="text: region().length == 0 ? '' : ', ' + region()"/>
                                    <span data-bind="text: location().length == 0 ? '' : ', ' + location()"/>
                                    <span data-bind="text: locale().length == 0 ? '' : ', ' + locale()"/>
                                    <span data-bind="text: site().length == 0 ? '' : ', ' + site()"/>
                                </b>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-1">&nbsp;
                    </div>
                    <div class="col-sm-11">
                                <b>
                                    <span data-bind="text: variety"></span>,
                                    <span data-bind="text: color"></span>,
                                    <span data-bind="text: dryness"></span> 
                                </b>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-1">&nbsp;
                    </div>
                    <div class="col-sm-11">
                            Reviewer :<b>&nbsp;<span data-bind="text: reviewer"></span>&nbsp;(<span data-bind="text: rating"></span>)</b>
                    </div>
                </div>



                <div class="row" >
                    <div class="col-sm-12" >
                        <span data-bind="html: erp.utils.Str2Html($data.note()) "></span>
                    </div>
                    <div class="col-sm-12" >
                        <span data-bind="html: erp.utils.Str2Html($data.importers()) "></span>
                    </div>
                </div>
            </div>
            <!-- /ko -->
            </div>
    </script>


    <script id="search-wine-template" type="text/html">

         <div class="row">
            <div class="col-sm-4  input-group-md">
                <input type="text" 
                    data-bind="event: { keyup: searchWithEnter }, value: searchString, valueUpdate: 'blur'" 
                    class="form-control" 
                    id="note-edit-producer-search" 
                    placeholder="Search String" required />
            </div>
            <div class="col-sm-1 input-group-md">
                <button class="btn btn-sm" data-bind="click: search" >Search</button>
            </div>


            <div class="col-sm-2">
                <select class="form-control input-sm col-sm-4" data-bind="options: stateGroups,
                    optionsText: 'name',
                    optionsValue: 'id',
                    value: stateGroupId,
                    valueUpdate: 'blur'">
                </select>
            </div>

        </div>
        <br />
        <div class="row" style="height: 650px; overflow:auto">
            <div class="row"  style="border-bottom: solid 1px gray;">
                <div class='col-sm-1'>&nbsp;</div>
                <div class='col-sm-3'>Name</div>
                <div class='col-sm-3'>Name To Show</div>
                <div class='col-sm-3'>URL</div>
            </div>
            <!-- ko foreach: items -->
            <div class="row"  style="border-bottom: solid 1px gray;">
                <div class='col-sm-1'>
                      <span data-bind="click: edit" class='glyphicon glyphicon-pencil' style="cursor:pointer" title="Start editing"></span>
                </div>  
                <div class='col-sm-3' data-bind="style: { color: erp.utils.statusColor($data.wfState()) }">
                      <span data-bind="text: name"></span>
                </div>
                <div class='col-sm-3' data-bind="style: { color: erp.utils.statusColor($data.wfState()) }">
                      <span data-bind="text: nameToShow"></span>
                </div>
                <div class='col-sm-3' data-bind="style: { color: erp.utils.statusColor($data.wfState()) }">
                      <span data-bind="text: websiteUrl"></span>
                </div>
               <div class='col-sm-2' >
                  <button class="btn btn-primary btn-xs" style="cursor:pointer" data-bind="click: loadNotes">Show Notes</button>
                  <button class="btn btn-primary btn-xs" style="cursor:pointer" data-bind="click: approve, visible: needApprove() == true">Approve</button>
               </div>
            </div>
        <!-- /ko -->
        </div>
    </script>


    <script id="edit-producer-template"  type="text/html">
        <br />
        <form name="edit-producer-template-form" id="edit-producer-template-form" action="#">
            <div class="row form-group">
                <div class="col-sm-3">Name To Show: </div>
                <div class="col-sm-6">
                    <input class="form-control input-sm" 
                        id="producerNameToShow" 
                        name="producerNameToShow" 
                        data-bind="value:nameToShow, valueUpdate: 'blur'" placeholder="Name To Show" required />
                </div>
            </div>
            <div class="row form-group">
                <div class="col-sm-3"></div>
                <div class="col-sm-6">'Name To Show' field presents a producer name how it would be shown on web site
                </div>
            </div>

            <br />
            <div class="row form-group">
                <div class="col-sm-3">Name: </div>
                <div class="col-sm-6">
                    <input class="form-control input-sm" 
                        id="producerName" 
                        name="producerName" 
                        data-bind="value:name, valueUpdate: 'blur'" placeholder="Name To Sort" required />
                </div>
            </div>
            <div class="row form-group">
                <div class="col-sm-3"></div>
                <div class="col-sm-6">'Name' field presents a producer name how it would be used while soritng producer by name
                </div>
            </div>

            <br />
            <div class="row form-group">
                <div class="col-sm-3">URL: </div>
                <div class="col-sm-6">
                    <input class="form-control input-sm" 
                        id="producerUrl" 
                        type="url"
                        name="url" 
                        data-bind="value:websiteUrl, valueUpdate: 'blur'" placeholder="Web Site URL"/>
                </div>
            </div>


        </form>
    </script>


<script id="tasting-note-template" type="text/html">
       <form id="tasting-note-form-validation"  name="tasting-note-form-validation">
            <div class="row" style="min-height: 550px">
                @Html.Partial("_TastingNoteForm")
            </div>
        </form>
</script>



<script type="text/javascript">


    function ProducerModel(src) {
        var self = this;


        self.toObject = function () {
            var o = ko.mapping.toJS(self);
            return o;
        }

        var dt2js = function (options) { return erp.utils.Json2Date(options.data) };
  



        self.fromObject = function (o) {
            ko.mapping.fromJS(o,
                {
                    "dateCreated": { create: dt2js },
                    "dateUpdated": { create: dt2js }

                }, self);
        }
        //
        //
        //
        if (src)
            self.fromObject(src);


        self.notesLoaded = ko.observable(false);
        self.notes = ko.observableArray();

        self.loadNotes = function(item){

            if( !self.notesLoaded() ){

                self.notesLoaded(true);

                $.get('@Url.Content("~/TastingNote/GetNotesByProducerN")', {producerN : item.id() },
                    function (result) {
                        var t = ko.mapping.fromJS(
                            {'children' : result}, 
                            {'children': 
                                {
                                    create: function(options) {
                                        var tnm = new TastingNoteModel(options.data);
                                        return tnm;

                                    }
                                }},{});

                        if(t.children().length == 0){
                            alert('No tasting found for that Producer ');
                        }else{
                            self.notes(t.children());
                        }
                    });
            }

            pageData.drillDownExt('producer-notes-template', self, self.nameToShow());

        }

        self.clearNotes = function(){
            self.notesLoaded(false);
            self.notes(null);
        }




        self.needApprove = function(){
            if( self.wfState() < 100 )
                return true;


            return false;
        }


        self.edit = function(item){
            //
            // use return value as template
            //
            //
            var m = new ProducerModel(item.toObject());
                        
            m.init = function (elements) {
                m.validator =   $("#edit-producer-template-form").validate({debug:true});
            };

            m.validate = function(){

                var result = true;
                result =  m.validator.form();
                if( ! result ){
                    m.validator.showErrors();
                }
                return result;
            }


            m.save = function (o) {

                if (!m.validate()) {
                    return false;
                }


                if(m.nameToShow().trim() != item.nameToShow().trim()){

                    var exsitingProducer = null;
                    $.ajax({
                        type: 'POST',
                        async: false,
                        url: '@Url.Content("~/Producer/SearchNameToShow")',
                        data:
                            {
                                name: m.nameToShow().trim()
                            },
                        success: function (r)
                        {
                            if( r != null && r.name ){
                                exsitingProducer = new ProducerModel(r);
                            }
                        },
                        error: function (request, status, error) {
                            alert('error while checking for existing "Name To Show"');
                            return;
                        }
                    });

                    if( exsitingProducer != null ){
                        alert("Such producer '" + exsitingProducer.nameToShow() + "' already recorder into DB ");
                        return;
                    }
                }



                $.ajax({
                    type: 'POST',
                    url: '@Url.Content("~/Producer/Update")',
                    data:
                        {
                            str: JSON.stringify(m.toObject())
                        },
                    success: function (r)
                    {
                        item.fromObject(r);

                        if( self.notesLoaded() == true ){
                            //
                            // reload notes
                            //
                            self.loadNotes(item);
                        }

                    },
                    error: function (request, status, error) {
                        alert('error while updating producer record');
                    }
                });

                return true;
            };



            var d = pageData.OpenDialog(m, m, "edit-producer-template");
            d.dialog("option", "title", "Edit Producer Record");
        }


        self.approve = function(){

            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Producer/Approve")',
                data:
                    {   id: self.id()},
                success: function (result) {
                    if(result > 0 ){
                        self.wfState(100);
                    }
                },
                error: function (request, status, error) {
                    alert("server error while approving producer. report to admin");

                }
            });

        }

    }


    function PageModel() {
        var self = this;

        self.items = ko.observableArray();
        self.searchString = ko.observable();

        
        self.searchWithEnter = function (data, event) {

            if ((event.keyCode == 13 || event.keyCode == "13")) {
                self.search();
            }
            return true;
        }

        self.search = function () {

            $.get('@Url.Content("~/Producer/SearchProducer")', { term: self.searchString(), state : self.stateGroupId() },
                function (result) {

                    var t = ko.mapping.fromJS(
                        { 'children': result },
                        {
                            'children':
                            {
                                create: function (options) {

                                    var result = new ProducerModel(options.data);
                                    return result;
                                }
                            }
                        }, {});

                    self.items(t.children());
                });
        }

        self.stateGroupId = ko.observable(0);
        self.stateGroups = ko.observableArray();


        self.initOnce = false;
        self.init = function () {

            if( ! self.initOnce ){

                self.stateGroups([
                    {name:'ALL',id:@EditorsCommon.WorkFlowState.STATE_GROUP_ALL},
                   {name:'In Process',id:@EditorsCommon.WorkFlowState.STATE_GROUP_IN_PROCESS},
                   {name:'Published',id:@EditorsCommon.WorkFlowState.STATE_GROUP_PUBLISHED},
                ]);

                self.stateGroupId(@EditorsCommon.WorkFlowState.STATE_GROUP_ALL);
                self.initOnce = !self.initOnce;
            }

        }
    }


    
    //
    //
    //
    var editNoteCallback = function (data) {

        try {


            if (data.wfState() >= 100) {
                // ask before allow editing
                var result = window.confirm("You are about to edit note which is already published,\r\nif you make changes and save it, the live note will be updated.\r\nDo you wish to continue?");
                if (!result)
                    return;
            }


            var m = new TastingNoteModel(data.toObject());


                m.init = function (elements) {
                    initNoteEditForm(elements, m);

                    m.validator = $("#tasting-note-form-validation").validate(
                        {
                            debug: true,
                            rules:
                                {
                                    'note-edit-rating': {
                                        required: false,
                                        rating: true
                                    },
                                    'note-edit-drink-from': {
                                        required: false,
                                        range: [2000, 2400]
                                    },
                                    'note-edit-drink-to': {
                                        required: false,
                                        range: [2000, 2400]
                                    },
                                    'note-edit-estimated-cost-low': {
                                        required: false,
                                        number: true
                                    },
                                    'note-edit-estimated-cost-high': {
                                        required: false,
                                        number: true
                                    }
                                }
                        }
                        );
                };


                m.validate = function () {
                    var validationResult = true;
                    validationResult = m.validator.form();
                    if (!validationResult)
                        m.validator.showErrors();
                    return validationResult;
                }

                //
                // load history
                //
                $.get('@Url.Content("~/TastingNote/GetNotesByWineN")', { wineN: m.wineN() },
                               function (result) {

                                   var t = ko.mapping.fromJS(
                                       { 'children': result },
                                       {
                                           'children':
                                              {
                                                  create: function (options) {
                                                      var result = new TastingNoteModel(options.data);
                                                      return result;
                                                  }
                                              }
                                       }, {});

                                   m.history(t.children());
                               });

                m.save = function (o) {


                    var result = window.confirm("You are about to save note which is already published,\r\nif you do so, the live note will be updated.\r\nDo you want continue?");
                    if (!result)
                        return true;

                    //
                    // activate main tab first, otherwise validation does not work properly
                    //
                    $('#tasting-note-form-validation #note-props-tab').tab('show');

                    if (!m.validate())
                        return false;

                    /**
                    * This function call checks whether the "Date To" field is greater than the "Date From". An 
                    * error message will be displayed if this fails validation
                    */
                    /*
                    if( m.areDateRangesValid(o) == false ) {
                        $('#date-to-field-container').append('<label class="error" for="note-edit-drink-to">This is not a valid date range</label>'); 
                        return false; 
                    }
                    */

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Content("~/TastingNote/UpdateInPlaceTastingNote")',
                        data:
                            {
                                str: JSON.stringify(o.toObject())
                            },
                        success: function (r) {

                            data.fromObject(r);

                        },
                        error: function (request, status, error) {

                            alert("There is an error on the server while executing this operation.\nPlease report to admin.");

                        }
                    });

                    return true;
                };

                m.areDateRangesValid = function (objectToSave) {

                    var dateFrom = parseInt(objectToSave.drinkDateLo);
                    var dateTo = parseInt(objectToSave.drinkDateHi);

                    if (dateTo >= dateFrom) {
                        return true;
                    }

                    return false;
                }

                var dlg = pageData.OpenDialog(m, m, "tasting-note-template");

                dlg.dialog("option", "title", "Edit Tasting Note").
                    dialog("option", "width", 900).
                    dialog("option", "height", 700);

            } catch (e) {
                alert(e);
            }

        }



        TastingNoteModel.prototype.editNote = editNoteCallback;

    // 


    var PAGE_CONTEXT = {};

    var pageData = new PageData();

    pageData.init = function () {
    }


    ko.applyBindings(pageData);

    PAGE_CONTEXT.sortByOptions =
        [
            { name: 'Producer', id: 0 },
            { name: 'Label', id: 1 },
            { name: 'Vintage', id: 2 }
        ];

    PAGE_CONTEXT.sortByOptionsVin =
        [
            { name: 'Producer', id: 0 },
            { name: 'Label', id: 1 },
        ];


    function wineColor(color) {
        if (color == "Red" || color == "red")
            return 'maroon';

        if (color == "White" || color == "white")
            return 'yellow';

        if (color == "Rose" || color == "rose")
            return 'red';
         no
        return 'maroon';
    };



    $(document).ready(function () {

        $("#dialog-placeholder").dialog({
            autoOpen: false,
            height: 500,
            width: 800,
            modal: true,
            buttons: {
                "Save Changes": function () {

                    if (pageData.CloseDialog()) {
                        $(this).dialog("close");
                    }
                },
                Cancel: function () {
                    pageData.CancelDialog();
                    $(this).dialog("close");
                }
            },
            close: function () {
            }
        });


        $("#error-dialog-placeholder").dialog({
            autoOpen: false,
            height: 500,
            width: 800,
            modal: true,
            buttons: {
                Close: function () {
                    pageData.CancelErrorDialog();
                    $(this).dialog("close");
                }
            },
            close: function () {
            }
        });


        pageData.init();
        pageData.drillDownExt('search-wine-template', new PageModel(), "Producers");



        $("#page-left-menu #producers").addClass("active");


    });

</script>

}