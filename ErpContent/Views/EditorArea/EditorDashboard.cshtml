@{
    ViewBag.Title = "Index";
    ViewBag.PageTitle = "EDITOR DASHBOARD";
    Layout = "~/Views/Shared/_LayoutBootstrap.cshtml";
}



 @section LeftMenu{
   @Html.Partial("_EditorLeftMenu")        
 }


<div class="row panel-heading">
<!-- ko foreach: treeItemArray -->
        <b>
            <button type="button" class="btn " data-bind="text: name, click: $root.drillDownTo, attr: { 'class': $index() == ($parent.treeItemArray().length - 1) ? 'btn-info' : 'btn-primary' } "></button>
        </b>
<!-- /ko -->
</div>


<div data-bind="template: { name: mv().view, data: mv().model, afterRender: $root.modelInit } "></div>


<div id="dialog-placeholder" data-bind="  template: { name: dmv().view, data: dmv().model, afterRender: $root.dialogInit }"></div>

<div id="error-dialog-placeholder" data-bind="  template: { name: dmvError().view, data: dmvError().model, afterRender: $root.errorDialogInit }"></div>

@section scripts {


    <script  src="~/Scripts/models/IssueItemModel.js"></script>
    <script  src="~/Scripts/models/IssueListUserModel.js"></script>
    <script  src="~/Scripts/models/AssignmentModel.js"></script>
    <script  src="~/Scripts/models/TastingNoteModel.js"></script>
    <script  src="~/Scripts/models/TastingEventModel.js"></script>
    <script  src="~/Scripts/models/PageDataModel.js"></script>

  <script id="issue-list-template"  type="text/html">
        @Html.Partial("_IssueListUserTemplate")
    </script>


    <script id="tasting-event-details-template" type="text/html">
        <div class="panel panel-success" style="background-color: white" data-bind="visible: open">
            <div class="row" style="border-bottom: solid 1px gray;">
                <span class="col-sm-11  pull-right" data-bind="html: erp.utils.Str2Html(comments())"></span>
            </div>

            <div style="max-height:700px; overflow:auto">
            <!-- ko foreach: notes -->
            <div style="border-bottom: solid 1px gray;">

            <div class="row  panel-heading">
                <div class="col-sm-1" style="margin-bottom: 5px; cursor: pointer">
                    <div class='glyphicon glyphicon-flag col-sm-1' data-bind="value:note,style: { color:statusColor($data.wfState()) }, attr : {title : statusName($data.wfState()) }" title="Status"></div>
                </div>

                <div class="col-sm-8" data-bind="click: editNote" style="margin-bottom: 5px; cursor: pointer">
                    <div>
                        <h5>
                            <b>
                                <span data-bind="text: vintage"></span>&nbsp;
                        <span data-bind="text: producer"></span>,
                        <span data-bind="text: wineName().length == 0 ? '' : wineName() + ',' "></span>
                                <span data-bind="text: variety"></span>,
                        <span data-bind="text: color"></span>,
                        <span data-bind="text: wineType"></span>, 
                        <span data-bind="text: dryness"></span>(<span data-bind="    text: rating"></span><span data-bind="    text: ratingQ"></span>)
                            </b>
                        </h5>
                    </div>
                </div>
                <div class="col-sm-3" style="margin-bottom: 5px; cursor: pointer">
                    <button class="btn btn-primary btn-xs inner-window-button" data-bind="click: approveNote, visible : wfState() == 50">Approve</button>
                    <button class="btn btn-primary btn-xs inner-window-button" data-bind="click: sendBackNote, visible : wfState() != 100">Send Back To Reviewer</button>
                    <button class="btn btn-primary btn-xs inner-window-button" data-bind="click: editNote, visible : wfState() != 100">Edit Note</button>
                </div>
            </div>

            <div class="row" style="border-bottom: solid 1px gray">
                <div class="col-sm-11  pull-right" style="cursor:pointer" data-bind="click: editNote,visible : wfState() < '@EditorsCommon.WorkFlowState.READY_APPROVED    ' ">
                    <span data-bind="html: erp.utils.Str2Html($data.noteFormated()) "></span>
                </div>
            </div>
            </div>
            <!-- /ko -->
            </div>
        </div>
    </script>


    <script id="assignment-details-template" type="text/html">

        <div class="row">
            <div class="col-sm-9">
                <span style="margin-right: 20px;">Submission Deadline: <strong data-bind="html: assignment.submitDate"></strong></span>
                <span style="margin-right: 20px;">Approval Deadline: <strong data-bind="html: assignment.approveDate"></strong></span>
                <span style="margin-right: 20px;">Author: <strong data-bind="html: assignment.author.name"></strong></span>
            </div>


           <div class="col-sm-2 pull-right">
                <div class="row">
                    <div class="col-sm-12">
                        <a href="#" class="btn btn-xs" data-bind="click: assignment.setApproved"><span class='glyphicon glyphicon-ok' title="Approve For Publishing"></span>&nbsp;Approve For Publishing</a>
                    </div>
                </div>
            </div>
        </div>

        <br />
        <div class="row" data-bind="visible: assignment.events().length > 0" >
            <div class="panel panel-success">
                    <div class="row  panel-heading">
                         <div class="col-sm-6"><span>Title</span></div>
                         <div class="col-sm-3"><span>Location</span></div>
                         <div class="col-sm-1"><span>Notes</span></div>
                         <div class="col-sm-1"><span>Waiting</span></div>
                         <div class="col-sm-1">&nbsp;</div>
                    </div>
                <div style="max-height:700px; overflow:auto">
            <!-- ko foreach: assignment.events -->
                    <div class="row" style="border-bottom: solid 1px gray;" data-bind="style : { color : editorCount() > 0 ? 'red' : 'black' }">
                        <div class="col-sm-6" data-bind="click: showNotesExt" style="cursor: pointer">
                            <strong><span data-bind="text: title"></span></strong>
                        </div>
                        <div class="col-sm-3"><span data-bind="text: location"></span></div>
                        <div class="col-sm-1"><span data-bind="text: notesCount"></span></div>
                        <div class="col-sm-1"><span data-bind="text: editorCount"></span></div>

                        <div class="col-sm-1">
                            <span data-bind="click: $parent.assignment.editTastingEvent"
                                class="glyphicon glyphicon-list-alt"
                                style="cursor: pointer"
                                title="view/edit comments"></span>
                            <span data-bind="visible : notesCount == 0, click: $parent.assignment.deleteTastingEvent"
                                class="glyphicon glyphicon-trash"
                                style="cursor: pointer"
                                title="delete tasting record (if empty)"></span>
                        </div>

                    </div>
                    <!-- /ko -->
                </div>
            </div>
        </div>
    </script>



    <script id="issue-details-template" type="text/html">


        <div class="row" data-bind="visible:  assignmentList().length > 0" >
            <div class="panel panel-success">
                    <div class="row  panel-heading" style="border-bottom: solid 1px gray;">
                         <div class="col-sm-9">Title</div>
                         <div class="col-sm-1"># Notes</div>
                         <div class="col-sm-2">Approval Deadline</div>
                    </div>
                <div style="max-height:700px; overflow:auto">
            <!-- ko foreach: assignmentList -->
                    <div class="row"  style="cursor: pointer" data-bind="click: goToAssignmentDetails.bind($data, $parent), style: { color: wfState() != 100  ? 'red' : 'black' }"  >
                        <div class="col-sm-9"><span data-bind="text: title"></span></div>
                        <div class="col-sm-1" ><span data-bind="text: notesCount"></span></div>
                        <div class="col-sm-2" ><span data-bind="text: approveDate"></span></div>
                    </div>
             <!-- /ko -->
                </div>
            </div>
        </div>
    </script>



    <script id="assignment-edit-template" type="text/html">
        <br />

        <div class="row form-group">
            <div class="col-sm-3">Publication: </div>
            <div class="col-sm-3"><span data-bind="text: publicationName"></span></div>
        </div>
        <div class="row form-group">
            <div class="col-sm-3">Issue#: </div>
            <div class="col-sm-3"><span data-bind="text: title"></span></div>
        </div>

        <div class="row form-group">
            <div class="col-sm-3">Publishing Date: </div>
            <div class="col-sm-3"><span data-bind="text: pubDate"></span></div>
        </div>
        <div class="row form-group">
            <div class="col-sm-3">Assignment Title: </div>
            <div class="col-sm-6">
                <input class="form-control input-sm" id="assgnmtTitle" value="title" /></div>
        </div>

        <div class="row form-group">
            <div class="col-sm-3">Author</div>
            <div class="col-sm-3">

                <select class="form-control input-sm" id="assgnmtAuthor"
                    data-bind="options: PAGE_CONTEXT.authors,
                        optionsText:  'name',
                        value: author,
                        valueUpdate: 'blur'">
                </select>
            </div>

        </div>

        <div class="row form-group">
            <div class="col-sm-3">Editor</div>
            <div class="col-sm-3">

                <select class="form-control input-sm" id="assgnmtEditor"
                    data-bind="options: PAGE_CONTEXT.editors,
                        optionsText: 'name',
                        value: editor,
                        valueUpdate: 'blur'">
                </select>
            </div>
        </div>

        <div class="row form-group">
            <div class="col-sm-3">ProofReader:</div>
            <div class="col-sm-3">

                <select class="form-control input-sm" id="assgnmtProofReader"
                    data-bind="options: $root.editors,
                        optionsText: 'name',
                        value: editor,
                        valueUpdate: 'blur'">
                </select>
            </div>
        </div>

        <div class="row form-group">
            <div class="col-sm-3">Submission Deadline: </div>
            <div class="col-sm-3">
                <input class="input-sm" id="assgnmtSbmtDate" /></div>
        </div>

        <div class="row form-group">
            <div class="col-sm-3">Proofread Deadline: </div>
            <div class="col-sm-3">
                <input class="input-sm" id="assgnmtPRDate" /></div>
        </div>

        <div class="row form-group">
            <div class="col-sm-3">Approval Deadline: </div>
            <div class="col-sm-3">
                <input class="input-sm" id="assgnmtAppDate" /></div>
        </div>

    </script>
    


<script id="tasting-note-template" type="text/html">
       <form id="tasting-note-form-validation"  name="tasting-note-form-validation">
            <div class="row" style="min-height: 550px">
                @Html.Partial("_TastingNoteForm")
            </div>
        </form>
</script>



<script id="tasting-event-template" type="text/html">
    @Html.Partial("_TastingEventForm")
</script>

<script id="error-view-template" type="text/html">

    <div data-bind="html : error "></div>

</script>



    <script type="text/javascript">





        function NotesModel(issue, assignment) {
            var self = this;

            self.issue = issue;
            self.assignment = assignment;


        }




        //************************************ ***************************************
        var eventShowItemsCallback = function(item)
        {
            if (!item.loaded()) {
                $.get('@Url.Content("~/TastingNote/GetNotesByTastingEvent")', { eventId: item.id },
                function (result) {
                    var t = ko.mapping.fromJS(
                        {'children' : result}, 
                        {'children': 
                            {
                                create: function(options) {
                                    var tnm = new TastingNoteModel(options.data);

                                    tnm.editNote = editNoteCallback;
                                    tnm.approveNote = approveNoteCallback;
                                    tnm.sendBackNote = sendBackNoteCallback;

                                    return tnm;

                                }
                            }},{});


                    item.loaded(true);
                    item.notes(t.children());
                    item.open(!item.open());
                    item.refreshCounts();
                });
            } else {
                item.open(!item.open());
            }
        }

// *****************************************************************************************************

        var approveNoteCallback = function (data) {

            var state = '@EditorsCommon.WorkFlowState.READY_APPROVED';

            setReadyNoteCallback(data,state);
        };

        var sendBackNoteCallback = function (data){
            var state = '@EditorsCommon.WorkFlowState.DRAFT';

            setReadyNoteCallback(data,state);
        };

        var setReadyNoteCallback = function (data, state) {

            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/TastingNote/SetTastingNoteState")',
                    data:
                        {   noteId: data.id , stateId : state},
                    success: function (result) {

                        if(result == state ){
                            data.wfState(result); 
                        }
                    },
                    error: function (request, status, error) {

                        var dlg = pageData.OpenErrorDialog({ error: request.responseText }, null, "error-view-template");

                        dlg.dialog("option", "title", "Server Error").
                            dialog("option", "width", 600).
                            dialog("option", "height", 300);

                    }
                });

        }


// *****************************************************************************************************


        var editNoteCallback = function (data) {

            try {


                if( data.wfState() >= 100 ){
                    // ask before allow editing
                    var result = window.confirm("You are about to edit note which is already published,\r\nif you make changes and save it, the live note will be updated.\r\nDo you wish to continue?");
                    if( !result )
                         return;
                }


                var m = new TastingNoteModel(data.toObject(),'@Url.Content("~")');


                m.init = function (elements) {
                    initNoteEditForm(elements,m,'@Url.Content("~")');

                    m.validator =   $("#tasting-note-form-validation").validate(
                        {
                            debug : true,
                            rules :
                                {
                                    'note-edit-rating': {
                                        required: false,
                                        rating: true
                                    },
                                    'note-edit-drink-from' : {
                                        required : false,
                                        range    : [2000,2400]
                                    },
                                    'note-edit-drink-to' : {
                                        required : false,
                                        range    : [2000,2400]
                                    },
                                    'note-edit-estimated-cost-low': {
                                        required: false,
                                        number: true
                                    },
                                    'note-edit-estimated-cost-high': {
                                        required: false,
                                        number: true
                                    }
                                }
                        }
                        );
                };


                m.validate = function(){
                    var validationResult = true;
                    validationResult =  m.validator.form();
                    if( ! validationResult )
                        m.validator.showErrors();
                    return validationResult;
                }

                //
                // load history
                //
                $.get('@Url.Content("~/TastingNote/GetNotesByWineN")', { wineN: m.wineN() },
                               function (result) {

                                   var t = ko.mapping.fromJS(
                                       { 'children': result },
                                       {
                                           'children':
                                              {
                                                  create: function (options) {
                                                      var result = new TastingNoteModel(options.data);
                                                      return result;
                                                  }
                                              }
                                       }, {});

                                   m.history(t.children());
                               });

                m.save = function (o) {


                    if( o.wfState() >= 100 ){
                        var result = window.confirm("You are about to save note which is already published,\r\nif you do so, the live note will be updated.\r\nDo you want continue?");
                        if( !result )
                            return true;
                    }
                    //
                    // activate main tab first, otherwise validation does not work properly
                    //
                    $('#tasting-note-form-validation #note-props-tab').tab('show');

                    if( !m.validate() )
                        return false;

                    /**
                    * This function call checks whether the "Date To" field is greater than the "Date From". An 
                    * error message will be displayed if this fails validation
                    */ 
                    /*
                    if( m.areDateRangesValid(o) == false ) {
                        $('#date-to-field-container').append('<label class="error" for="note-edit-drink-to">This is not a valid date range</label>'); 
                        return false; 
                    }
                    */

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Content("~/TastingNote/UpdateTastingNote")',
                        data:
                            {
                                str: JSON.stringify(o.toObject())
                            },
                        success: function (r) {

                            data.fromObject(r);

                        },
                        error: function (request, status, error) {


                            var dlg = pageData.OpenErrorDialog({ error: request.responseText }, null, "error-view-template");

                            dlg.dialog("option", "title", "Server Error").
                                dialog("option", "width", 600).
                                dialog("option", "height", 300);

                        }
                    });
 
                    return true;
                };

                m.areDateRangesValid = function(objectToSave) {

                    var dateFrom    = parseInt(objectToSave.drinkDateLo); 
                    var dateTo      = parseInt(objectToSave.drinkDateHi); 

                    if(dateTo >= dateFrom) {
                        return true; 
                    }

                    return false; 
                }

                var dlg = pageData.OpenDialog(m, m, "tasting-note-template");

                dlg.dialog("option", "title", "Edit Tasting Note").
                    dialog("option", "width", 900).
                    dialog("option", "height", 700);

            } catch (e) {
                alert(e);
            }

        }



        //
        // R&D
        //



        TastingNoteModel.prototype.editNote = editNoteCallback;
        TastingNoteModel.prototype.approveNote = approveNoteCallback;
        TastingNoteModel.prototype.sendBackNote = sendBackNoteCallback;

        TastingNoteModel.prototype.setReadyNote = setReadyNoteCallback;


        var issueDrillDownCallback = function () {
            if (!this.loaded) {
                this.loaded = !this.loaded;

                var s = this;
                $.get( '@Url.Content("~/Assignment/GetAssignmentsByIssueByEditor")', { issueId: this.id() },
                     function (result) {

                         var t = ko.mapping.fromJS(
                                 { 'children': result },
                                 {
                                     'children':
                                        {
                                            create: function (options) {
                                                var result = new AssignmentModel(options.data);
                                                return result;
                                            }
                                        }
                                 }, {});

                         if (t.children().length == 0) {
                             alert("there are no assignments for that issue assigned to your account.");
                         }

                         s.assignmentList(t.children());
                     });

            }
            pageData.drillDownExt('issue-details-template', this, this.publicationName() + " " + this.title());
        }

        IssueItemModel.prototype.drillDown = issueDrillDownCallback;

        //
        //
        //
        TastingEventModel.prototype.showNotesExt = function(item){
            if( !item.loaded()){
                item.showNotes(item);
            }

            if( !item.exit ){
                item.exit = function(model){
                    model.refreshCounts();
                }
            }

            pageData.drillDownExt('tasting-event-details-template', item, item.title());
        };





     var PAGE_CONTEXT = {};

     var pageData = new PageData();

     pageData.init = function () {
     }

     ko.applyBindings(pageData);



        // colors are different for editors
        //
        //
     function statusColor(state)
     {
         if( state >= '@EditorsCommon.WorkFlowState.PUBLISHED' )
            return 'black';

         if (state == '@EditorsCommon.WorkFlowState.DRAFT' || state == '@EditorsCommon.WorkFlowState.READY_FOR_REVIEW')
            return 'orange';

        if (state == '@EditorsCommon.WorkFlowState.READY_FOR_PROOF_READ')
            return 'red';
         
         if (state == '@EditorsCommon.WorkFlowState.READY_APPROVED')
            return 'blue';

        return 'black';
     };

        function statusName(state)
        {
            if( state >= '@EditorsCommon.WorkFlowState.PUBLISHED' )
                return 'Published';

            if (state == '@EditorsCommon.WorkFlowState.DRAFT' || state == '@EditorsCommon.WorkFlowState.READY_FOR_REVIEW')
                return 'Draft';

            if (state == '@EditorsCommon.WorkFlowState.READY_FOR_PROOF_READ')
                return 'Ready For Review/Approval ';

            if (state == '@EditorsCommon.WorkFlowState.READY_APPROVED')
                return 'Approved';

            return 'Unknown';
        }



        function   textAreaRowsCount(note){

            var brCount = 0;
            
            brCount = note.split('\n').length;

            return Math.max(3, brCount + 1);

        }

 
        function hideSaveButtons() {
            $('div.btn-group').hide(); 
        }

        function showSaveButtons() {
            $('div.btn-group').show(); 
        }



     $(document).ready(function () {

         //
         // if session expires
         //
         $(function () { 
             $(document).ajaxError(
             function (e, xhr, settings) { 

                 if (xhr.status == 401) { 
                     var newLocation = '@Url.Action("Login", "Account")';
                     window.location = newLocation; 
             }
             });

         });

         $("#dialog-placeholder").dialog({
             autoOpen: false,
             height: 500,
             width: 800,
             modal: true,
             buttons: {
                 "Save Changes": function () {

                     if (pageData.CloseDialog()) {
                         $(this).dialog("close");
                     }
                 },
                 Cancel: function () {
                     pageData.CancelDialog();
                     $(this).dialog("close");
                 }
             },
             close: function () {
             }
         });


         $("#error-dialog-placeholder").dialog({
             autoOpen: false,
             height: 500,
             width: 800,
             modal: true,
             buttons: {
                 Close: function () {
                     pageData.CancelErrorDialog();
                     $(this).dialog("close");
                 }
             },
             close: function () {
             }
         });


         pageData.init();
         //pageData.drillDownExt('issue-details-template', new IssueModel(),"Assignments");
         pageData.drillDownExt('issue-list-template', new IssueListUserModel('@Url.Content("~")'), "Issues");


     });


    </script>

}
