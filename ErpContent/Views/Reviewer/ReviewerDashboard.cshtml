@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutBootstrap.cshtml";
}

@section LeftMenu{
    @Html.Partial("_ReviewerLeftMenu")
}



<div class="row panel-heading">

        <!-- ko foreach: treeItemArray -->
        <b>
            <button type="button" class="btn " data-bind="text: name, click: $root.drillDownTo, attr: { 'class': $index() == ($parent.treeItemArray().length - 1) ? 'btn-info' : 'btn-primary' } "></button>
        </b>

        <!-- /ko -->
</div>

<div data-bind="template: { name: mv().view, data: mv().model, afterRender: $root.modelInit } "></div>


<div id="dialog-placeholder" data-bind="template: { name: dmv().view, data: dmv().model, afterRender: $root.dialogInit }"></div>

<div id="error-dialog-placeholder" data-bind="template: { name: dmvError().view, data: dmvError().model, afterRender: $root.errorDialogInit }"></div>


@section scripts {



    <script  src="~/Scripts/models/IssueItemModel.js"></script>
    <script  src="~/Scripts/models/IssueListUserModel.js"></script>
    <script  src="~/Scripts/models/AssignmentModel.js"></script>

    <script src="~/Scripts/models/TastingNoteModel.js"></script>
    <script src="~/Scripts/models/TastingEventModel.js"></script>
    <script src="~/Scripts/models/PageDataModel.js"></script>


  <script id="issue-list-template"  type="text/html">
        @Html.Partial("_IssueListUserTemplate")
    </script>


    <script id="assignment-edit-template" type="text/html">
        <br />

        <form name="assignment-edit-template-form" id="assignment-edit-template-form" action="#">
            <div class="row form-group">
                <div class="col-sm-3">Publication: </div>
                <div class="col-sm-6"><span data-bind="text: publication"></span></div>
            </div>
            <div class="row form-group">
                <div class="col-sm-3">Issue#: </div>
                <div class="col-sm-6"><span data-bind="text: issue"></span></div>
            </div>
            <div class="row form-group">
                <div class="col-sm-3">Author</div>
                <div class="col-sm-6"><span data-bind="text: author.name"></span></div>
             </div>

            <br />
            <div class="row form-group">
                <div class="col-sm-3">Assignment Title: </div>
                <div class="col-sm-8">
                    <input class="form-control input-sm" id="assgnmtTitle" name="assgnmtTitle" data-bind="value: title, valueUpdate: 'blur'" placeholder="Title" required />
                </div>
            </div>


        </form>
    </script>


    <script id="tasting-event-details-template" type="text/html">


        <div class="row">
            <div class="col-sm-2">
                <h4><span>Tasting Notes</span></h4>
            </div>

            <div class="col-sm-1 pull-right">
                <span data-bind="click: assignment.editTastingEvent"
                    class="glyphicon glyphicon-list-alt"
                    style="cursor: pointer"
                    title="view/edit comments"></span>
            </div>

        </div>

        <div class="well  panel panel-success" data-bind="visible: open">
            <div class="row" style="border-bottom: solid 1px gray;">
                <span class="col-sm-11  pull-right" data-bind="html: erp.utils.Str2Html(comments())"></span>
            </div>
            <div class="row">
                <div class="col-sm-6" data-bind="visible: notesCount() > 1">
                    &nbsp;Sort Notes By
                                    <select data-bind="event: { change: sortBy },
                                    options: PAGE_CONTEXT.sortByOptions,
                                    optionsText: 'name',
                                    optionsValue: 'id',
                                    value: sortById,
                                    valueUpdate: 'blur'">
                                    </select>
                </div>
                <div class="col-sm-5 pull-right">
                    <button class="btn  btn-primary btn-xs inner-window-button" data-bind="click: createNoteFromExisting">Add Wines</button>
                    <button class="btn  btn-primary btn-xs inner-window-button" data-bind="click: createNote">Add New Note</button>
                </div>
            </div>
            <br />
            <!-- ko foreach: notes -->
            <div class="row panel-heading">
                <div class='col-sm-1'>
                    <div class='glyphicon glyphicon-flag col-sm-1' data-bind="value: note, style: { color: statusColor($data.wfState()) }, attr: { title: statusName($data.wfState()) }" title="Status"></div>
                </div>
                <div class='col-sm-9'>
                    <h5>
                        <b>
                            <span data-bind="text: vintage"></span>
                            <span data-bind="text: producer"></span>,
                                            <span data-bind="text: wineName().length == 0 ? '' : wineName() + ',' "></span>
                            <span data-bind="text: variety"></span>,
                                            <span data-bind="text: color"></span>,
                                            <span data-bind="text: wineType"></span>, 
                                            (<span data-bind="text: rating"></span><span data-bind="    text: ratingQ"></span>)
                        </b>
                        <span data-bind="text: coDrink()"></span>
                        <span data-bind="text: coPrice()"></span>
                    </h5>

                </div>
                <div class='col-sm-2'>
                    <button class="btn  btn-primary btn-xs" data-bind="visible: wfState() == 0, click: editNote">Edit</button>
                    <button class="btn  btn-primary btn-xs" data-bind="visible: wfState() == 0, click: setReadyNote" title="Set 'sent for approval' status">Ready</button>
                    <button class="btn  btn-primary btn-xs" data-bind="visible: wfState() > 0 && wfState() < 60, click: setDraftNote" title="Set 'draft' status">Draft</button>
                    <span data-bind="visible: wfState() == 0, click: $parent.assignment.moveTastingNote.bind($data, $parent)"
                        class="glyphicon glyphicon-move"
                        style="cursor: pointer"
                        title="move tasting note to other assignment/tasting record"></span>
                    <span data-bind="visible: $data.wfState() == 0, click: $parent.deleteTastingNote"
                        class="glyphicon glyphicon-trash"
                        style="cursor: pointer"
                        title="delete tasting note (if empty)"></span>
                </div>
            </div>
            <div class="row" style="border-bottom: solid 1px gray;">
                <div class="col-sm-11  pull-right">
                    <span data-bind="html: erp.utils.Str2Html($data.noteFormated())"></span>
                </div>
                <div class="col-sm-11  pull-right">
                    <span data-bind="html: erp.utils.Str2Html($data.importers())"></span>
                </div>
            </div>
            <!-- /ko -->
        </div>
    </script>

    <script id="assignment-details-template" type="text/html">

        <div class="row">
            <div class="col-sm-10">
                <h4><span>Tasting Records</span></h4>
            </div>

           <div class="col-sm-2 pull-right">
                <div class="row">

                    <div class="col-sm-12">
                        <a href="#" class="btn btn-xs" data-bind="click: assignment.export"><span class='glyphicon glyphicon-list-alt' title="Export to Doc">&nbsp;</span>Export to Doc</a>
                    </div>

                    <div class="col-sm-12">
                        <a href="#" class="btn btn-xs" data-bind="click: assignment.createTastingEvent"><span class='glyphicon glyphicon-plus' title="Add Tasting Record"></span>&nbsp;Add Tasting Record</a>
                    </div>
                    <div class="col-sm-12">
                        <a href="#" class="btn btn-xs" data-bind="click: assignment.setReadyForApproval"><span class='glyphicon glyphicon-ok' title="Set Ready For Approval"></span>&nbsp;Set Ready For Approval</a>
                    </div>
                </div>
            </div>
         </div>



        <div class="row" data-bind="visible: assignment.events().length > 0" >
            <div class="panel panel-success">
                    <div class="row   panel-heading">
                         <div class="col-sm-5">Title</div>
                         <div class="col-sm-3">Location</div>
                         <div class="col-sm-1">Notes</div>
                         <div class="col-sm-1">Waiting</div>
                         <div class="col-sm-1">&nbsp;</div>
                    </div>
                <div style="max-height:650px; overflow:auto">
            <!-- ko foreach: assignment.events -->
                    <div class="row" data-bind="style: { color: draftCount() > 0 ? 'red' : 'black' }" >
                        <div class="col-sm-5" data-bind="click : showNotesExt.bind($data, $parent.assignment)" style="cursor: pointer">
                            <strong><span data-bind="text: title"></span></strong>
                        </div>
                        <div class="col-sm-3"><span data-bind="text: location"></span></div>
                        <div class="col-sm-1"><span data-bind="text: notesCount"></span></div>
                        <div class="col-sm-1"><span data-bind="text: draftCount"></span></div>

                        <div class="col-sm-1">
                            <span data-bind="click: $parent.assignment.editTastingEvent"
                                class="glyphicon glyphicon-list-alt"
                                style="cursor: pointer"
                                title="view/edit comments"></span>


                            <span data-bind="visible: $parent.assignment.wfState() == 0, click: $parent.assignment.moveTastingEvent"
                                class="glyphicon glyphicon-move"
                                style="cursor: pointer"
                                title="move tasting record to other assignment"></span>


                            <span data-bind="visible: notesCount == 0, click: $parent.assignment.deleteTastingEvent"
                                class="glyphicon glyphicon-trash"
                                style="cursor: pointer"
                                title="delete tasting record (if empty)"></span>
                        </div>

                    </div>

            <!-- /ko -->
                </div>
            </div>
        </div>
    </script>


    <script id="issue-details-template" type="text/html">


        <div class="row">
            <div class="col-sm-2">
                <span>Publication</span>
            </div>
            <div class="col-sm-2">
                <span data-bind="text: publicationName"></span>
            </div>
            <div class="col-sm-2 pull-right">
                <div class="row">
                    <div class="col-sm-12">
                        <a href="#" class="btn btn-xs" data-bind="click: NewAssignment, visible: AllowPrivateAssignment() == true "><span class='glyphicon glyphicon-plus' title="Add New Assignment">&nbsp;</span>Add New Assignment</a>
                    </div>
                </div>
            </div>

         </div>
        <div class="row">
            <div class="col-sm-2">
                <h4><span>Assignments</span></h4>
            </div>
         </div>


        <div class="row" data-bind="visible: assignmentList().length > 0" >
            <div class="panel panel-success">
                    <div class="row  panel-heading">
                         <div class="col-sm-8">Title</div>
                         <div class="col-sm-1">Created</div>
                         <div class="col-sm-1">Submit</div>
                         <div class="col-sm-1"># Notes</div>
                         <div class="col-sm-1">&nbsp;</div>
                    </div>
                <div style="max-height:650px; overflow:auto">
            <!-- ko foreach: assignmentList -->


                    <div class="row" style="cursor: pointer" data-bind=" style: { color: wfState() != 100 && $parent.AllowPrivateAssignment() == false ? 'red' : 'black', href: name }" >
                        <div class="col-sm-8"><span data-bind="text: title, click: goToAssignmentDetails.bind($data, $parent)"></span></div>
                        <div class="col-sm-1"><span data-bind="text: CreatedDate"></span></div>
                        <div class="col-sm-1"><span data-bind="text: submitDate"></span></div>
                        <div class="col-sm-1"><span class="label label-info " data-bind="text: notesCount"></span></div>
                        <div class="col-sm-1">
                                <span data-bind="click: $parent.deleteAssignment, visible: notesCount() == 0 && $parent.AllowPrivateAssignment() == true " class='glyphicon glyphicon-trash' style="cursor:pointer" title="Delete Assignment (if empty)"></span>
                        </div>
                    </div>

                    <!-- /ko -->
                </div>
            </div>
        </div>



    </script>


 
    <script id="tasting-note-template-window" type="text/html">


        <form id="tasting-note-form-validation"  name="tasting-note-form-validation">
            <div class="row" style="min-height: 500px">
                @Html.Partial("_TastingNoteForm")
            </div>
        </form>


        <div class="btn-group">
                <button class="btn  btn-primary btn-xs" data-bind="click: save">Save Changes</button>
                <button class="btn  btn-primary btn-xs" style="margin-left:2px" data-bind="click: $root.drillUp">Cancel</button>
        </div>
    </script>


    <script id="search-tasting-note-template-window" type="text/html">



        <div class="row" >
            <div class="row" >
                <div class='col-sm-4  pull-right' >
                    <span class='glyphicon glyphicon-shopping-cart'></span>&nbsp;
                    <span data-bind="text: cart().length" ></span>
                   &nbsp;<button class="btn  btn-primary btn-sm" style="cursor:pointer" data-bind="click: cartToTastingEvent">Add To Tasting Record</button>
                   &nbsp;<button class="btn  btn-primary btn-sm" style="cursor:pointer" data-bind="click: clearCart">Clear</button>
                </div>
            </div>

            <div class="row" style="height: 150px; overflow:auto; border: solid 1px gray">
            <!-- ko foreach: cart -->
               <div class='col-sm-1'>
                   <span class='glyphicon glyphicon-trash' style='cursor:pointer'" data-bind="click: $parent.deleteFromCart"></span>
                   &nbsp;
                   <span class='glyphicon glyphicon-glass'  data-bind="style: { color: wineColor($data.vin.colorClass()) }" ></span>

                </div>

               <div class='col-sm-11'>
                            <span data-bind="text: vintage"></span>
                            <span data-bind="text: vin.producer"></span>,
                            <span data-bind="text: vin.label().length == 0 ? '' : vin.label() + ',' "></span>
                            <span data-bind="text: vin.country().length == 0 ? '' : vin.country() + ','"></span> 
                            <span data-bind="text: vin.region().length == 0 ? '' : vin.region() + ','"></span> 
                            <span data-bind="text: vin.location().length == 0 ? '' : vin.location() + ','"></span> 
                            <span data-bind="text: vin.locale().length == 0 ? '' : vin.locale() + ','"></span> 
                            <span data-bind="text: vin.site().length == 0 ? '' : vin.site() + ','"></span> 
                            <span data-bind="text: vin.variety().length == 0 ? '' : vin.variety() + ','"></span>
                            <span data-bind="text: vin.colorClass().length == 0 ? '' : vin.colorClass() + ','"></span>
                            <span data-bind="text: vin.wineType().length == 0 ? '' : vin.wineType() + ','"></span>
                            <span data-bind="text: vin.dryness"></span>

                </div>
             <!-- /ko -->
            </div>
        </div>

        <br />
         <div class="row">
            <div class="col-sm-4  input-group-md">
                <input type="text"
                       data-bind="event: { keyup: searchWithEnter }, value: searchString, valueUpdate: 'blur'"
                       class="form-control"
                       id="note-edit-producer-search"
                       placeholder="Enter Wine To Search" required />
            </div>
            <div class="col-sm-1 input-group-md">
                <button id="producer-search-button" class="btn  btn-primary btn-sm" data-bind="click: search">Search</button>
            </div>

            &nbsp;<span data-bind="visible: items().length > 0">Sort Results By
            <select
                data-bind="event: { change: sortBy },
                options: PAGE_CONTEXT.sortByOptionsVin,
                optionsText: 'name',
                optionsValue: 'id',
                valueUpdate: 'blur'">
            </select>
                </span>

        </div>


        <div class="row" style="height: 450px; overflow:auto; border: solid 1px gray">

            <!-- ko foreach: items -->
            <div class="row"  style="border-bottom: solid 1px gray">
                <div class='col-sm-9'>
                    <div class="row">
                        <span class="col-sm-1">
                        <span class='glyphicon glyphicon-glass' data-bind="style: { color: wineColor($data.colorClass()) }" ></span>&nbsp;
                        <span class='glyphicon glyphicon-pencil' data-bind="click: $parent.editVin.bind($data), visible : false" ></span>&nbsp;
                        </span>
                        <span class="col-sm-11">
                        <b><span data-bind="text: producer"></span>
                        <span data-bind="text: label"></span></b> 
                        </span>
                    </div>
                    <div class="row">
                        <span class="col-sm-1">&nbsp;
                        </span>
                        
                        
                        <span class="col-sm-11">

                        <span data-bind="text: country().length == 0 ? '' : country() + ','"></span> 
                        <span data-bind="text: region().length == 0 ? '' : region() + ','"></span> 
                        <span data-bind="text: location().length == 0 ? '' : location() + ','"></span> 
                        <span data-bind="text: locale().length == 0 ? '' : locale() + ','"></span> 
                        <span data-bind="text: site().length == 0 ? '' : site() + ','"></span> 
                        <span data-bind="text: variety().length == 0 ? '' : variety() + ','"></span>, 
                        <span data-bind="text: colorClass"></span>, 
                        <span data-bind="text: dryness"></span>
                        </span>
                    </div>
                </div>
                <div class='col-sm-3' >
                    <div class="row">
                       <button class="btn  btn-success btn-xs" style="cursor:pointer" data-bind="click: $parent.newVinAndVintage.bind($data)">New Vintage or Wine</button>
                    </div>
                    <div class="row">
            <!-- ko foreach: wines -->
                 <button class="btn  btn-primary btn-xs" style="cursor:pointer" data-bind="text: vintage, click : $parents[1].createNoteVintage.bind($data,$parent,$data)"></button>
            <!-- /ko -->
                    </div>
                 </div>
            </div>
            <!-- /ko -->

        </div>
    </script>


    <script id="tasting-event-template" type="text/html">
        <form id="tasting-event-form" name="tasting-event-form" action="#">
            @Html.Partial("_TastingEventForm")
        </form>
    </script>



    <script id="tasting-event-move-template" type="text/html">


        <div class="row">
            <label for="publications" class="col-sm-4 control-label">Assignments:</label>
            <div class="col-sm-8">
                <select
                    class="form-control input-sm"
                    data-bind="
                    options: assignments,
                    optionsText: 'title',
                    optionsValue: 'id',
                    value: moveToAssignmentId,
                    valueUpdate: 'blur',
                    optionsCaption: ''">
                </select>
            </div>
        </div>



    </script>




    <script id="tasting-note-move-template" type="text/html">


        <div class="row">
            <label for="publications" class="col-sm-4 control-label">Assignments:</label>
            <div class="col-sm-8">
                <select
                    class="form-control input-sm"
                    data-bind="options: assignments,
                            optionsText: 'title',
                            optionsValue: 'id',
                            value: moveToAssignmentId,
                            valueUpdate: 'blur',
                            optionsCaption: ''">
                </select>
            </div>
        </div>

        <div class="row">
            <label for="publications" class="col-sm-4 control-label">Tasting Records:</label>
            <div class="col-sm-8">
                <select
                    class="form-control input-sm"
                    data-bind="
                            options: events,
                            optionsText: 'title',
                            optionsValue: 'id',
                            value: moveToEventId,
                            valueUpdate: 'blur',
                            optionsCaption: ''">
                </select>
            </div>
        </div>


    </script>


    
    <script id="new-wine-and-vintage-template" type="text/html">

       <form id="new-wine-and-vintage-form-validation"  name="new-wine-and-vintage-form-validation">

        <div class="row">
            <div class="col-sm-2  input-group-md">
                Vintage
            </div>
            <div class="col-sm-5 input-group-md">
              <input type="text" 
                    data-bind="value: vintage, valueUpdate: 'blur'" 
                    class="form-control" 
                    name="vin-edit-vintage" 
                    id="vin-edit-vintage" 
                    placeholder="vintage" required/>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2  input-group-md">
                Producer
            </div>
            <div class="col-sm-5 input-group-md">
              <input type="text" 
                    data-bind="value: vin.producer, valueUpdate: 'blur'" 
                    class="form-control" 
                    name="vin-edit-producer" 
                    id="vin-edit-producer" 
                    placeholder="Producer" required/>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2  input-group-md">
                Label
            </div>
            <div class="col-sm-5 input-group-md">
              <input type="text" 
                    data-bind="value: vin.label, valueUpdate: 'blur'" 
                    class="form-control" 
                    name="vin-edit-label" 
                    id="vin-edit-label" 
                    placeholder="Label"/>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2  input-group-md">
                Wine Type
            </div>
            <div class="col-sm-5 input-group-md">
               <select  name="vin-edit-color"
                    class="form-control"
                    data-bind="options: vin.wineTypeLookup,
    optionsText: 'name',
    optionsValue: 'name',
    value: vin.wineType,
    valueUpdate: 'blur'" required></select>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2  input-group-md">
                Variety
            </div>
            <div class="col-sm-5 input-group-md">
              <input type="text" 
                    data-bind="value: vin.variety, valueUpdate: 'blur'" 
                    class="form-control" 
                    name="vin-edit-variety" 
                    id="vin-edit-variety" 
                    placeholder="Variety" required/>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2  input-group-md">
                Color
            </div>
            <div class="col-sm-5 input-group-md">
            <select  name="vin-edit-color"
                    class="form-control"
                    data-bind="options: vin.wineColorLookup,
    optionsText: 'name',
    optionsValue: 'name',
    value: vin.colorClass,
    valueUpdate: 'blur'" required></select>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-2  input-group-md">
                Dryness
            </div>
            <div class="col-sm-5 input-group-md">

            <select  name="vin-edit-dryness"
                    class="form-control"
                    data-bind="options: vin.wineDrynessLookup,
    optionsText: 'name',
    optionsValue: 'name',
    value: vin.dryness,
    valueUpdate: 'blur'" required></select>


            </div>
        </div>


      <div class="row">
            <label class="col-sm-2 control-label">Country:</label>
            <div class="col-sm-5">
                <input type="text" 
                    id="vin-edit-location-country" data-bind="value: vin.country, valueUpdate: 'blur'" class="form-control" placeholder="Country" required/>
            </div>
        </div>

        <div class="row">
            <label class="col-sm-2 control-label">Region:</label>
            <div class="col-sm-5">
                <input type="text" id="vin-edit-location-region" data-bind="value: vin.region, valueUpdate: 'blur'" class="form-control" placeholder="Region" />
            </div>
        </div>

        <div class="row">
            <label class="col-sm-2 control-label">Location:</label>
            <div class="col-sm-5">
                <input type="text" id="vin-edit-location-location" data-bind="value: vin.location, valueUpdate: 'blur'" class="form-control" placeholder="Location"/>
            </div>
        </div>

        <div class="row">
            <label class="col-sm-2 control-label">Locale:</label>
            <div class="col-sm-5">
                <input type="text" id="vin-edit-location-locale" data-bind="value: vin.locale, valueUpdate: 'blur'" class="form-control" placeholder="Locale" />
            </div>
        </div>

        <div class="row">
            <label class="col-sm-2 control-label">Site:</label>
            <div class="col-sm-5">
                <input type="text" id="note-edit-location-site" data-bind="value: vin.site, valueUpdate: 'blur'" class="form-control" placeholder="Site" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-12">
                 Start typing into the fields and select from dropdown choices that appear.  Avoid copying and pasting into the fields.
            </div>
        </div>


      </form>
    </script>



    <script id="vin-edit-template" type="text/html">
        <div class="row">
            <div class="col-sm-2  input-group-md">
                Producer
            </div>
            <div class="col-sm-5 input-group-md">
              <input type="text" 
                    data-bind="value: producer, valueUpdate: 'blur'" 
                    class="form-control" 
                    name="vin-edit-producer" 
                    id="vin-edit-producer" 
                    placeholder="Producer" required/>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2  input-group-md">
                Label
            </div>
            <div class="col-sm-5 input-group-md">
              <input type="text" 
                    data-bind="value: label, valueUpdate: 'blur'" 
                    class="form-control" 
                    name="vin-edit-label" 
                    id="vin-edit-label" 
                    placeholder="Label" required/>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2  input-group-md">
                Wine Type
            </div>
            <div class="col-sm-5 input-group-md">
               <select  name="vin-edit-color"
                    class="form-control"
                    data-bind="options: wineTypeLookup,
    optionsText: 'name',
    optionsValue: 'name',
    value: wineType,
    valueUpdate: 'blur'" required></select>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2  input-group-md">
                Variety
            </div>
            <div class="col-sm-5 input-group-md">
              <input type="text" 
                    data-bind="value: variety, valueUpdate: 'blur'" 
                    class="form-control" 
                    name="vin-edit-variety" 
                    id="vin-edit-variety" 
                    placeholder="Variety" required/>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2  input-group-md">
                Color
            </div>
            <div class="col-sm-5 input-group-md">
            <select  name="vin-edit-color"
                    class="form-control"
                    data-bind="options: wineColorLookup,
    optionsText: 'name',
    optionsValue: 'name',
    value: colorClass,
    valueUpdate: 'blur'" required></select>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-2  input-group-md">
                Dryness
            </div>
            <div class="col-sm-5 input-group-md">

            <select  name="vin-edit-dryness"
                    class="form-control"
                    data-bind="options: wineDrynessLookup,
    optionsText: 'name',
    optionsValue: 'name',
    value: dryness,
    valueUpdate: 'blur'" required></select>


            </div>
        </div>


      <div class="row">
            <label class="col-sm-2 control-label">Country:</label>
            <div class="col-sm-5">
                <input type="text" 
                    id="vin-edit-location-country" data-bind="value: country, valueUpdate: 'blur'" class="form-control" placeholder="Country" />
            </div>
        </div>

        <div class="row">
            <label class="col-sm-2 control-label">Region:</label>
            <div class="col-sm-5">
                <input type="text" id="vin-edit-location-region" data-bind="value: region, valueUpdate: 'blur'" class="form-control" placeholder="Region" />
            </div>
        </div>

        <div class="row">
            <label class="col-sm-2 control-label">Location:</label>
            <div class="col-sm-5">
                <input type="text" id="vin-edit-location-location" data-bind="value: location, valueUpdate: 'blur'" class="form-control" placeholder="Location"/>
            </div>
        </div>

        <div class="row">
            <label class="col-sm-2 control-label">Locale:</label>
            <div class="col-sm-5">
                <input type="text" id="vin-edit-location-locale" data-bind="value: locale, valueUpdate: 'blur'" class="form-control" placeholder="Locale" />
            </div>
        </div>

        <div class="row">
            <label class="col-sm-2 control-label">Site:</label>
            <div class="col-sm-5">
                <input type="text" id="note-edit-location-site" data-bind="value: site, valueUpdate: 'blur'" class="form-control" placeholder="Site" />
            </div>
        </div>


    </script>



    <script id="error-view-template" type="text/html">

        <div data-bind="html : error "></div>

    </script>

   


    <script type="text/javascript">



        function NotesModel(issue, assignment) {
            var self = this;

            self.issue = issue;
            self.assignment = assignment;

            self.FullTitle = ko.computed(function () {

                return self.assignment.title() + " (" + self.assignment.publication() + ", issue# " + self.assignment.issue()+")"
            });

            self.FullDeadline = ko.computed(function () {
                return "Submission Deadline: " + self.assignment.submitDate;
            });

            self.viewArticle = function() {
                var url = '@Url.Content("~/Article/ViewArticle")';
                $.ajax({
                    type:'POST', 
                    url:'@Url.Content("~/Article/ViewArticle")', 
                    data: { ID:self.assignment.id, fieldNameToMatch: "assignmentID" }, 
                    success: function(result) {

                        delete result.Date; 

                        var notesContainer = unescape(result.Notes); 
                        result.Notes = notesContainer; 

                        var articleModelObject = ArticleModel(result);  

                        pageData.drillDown("article-preview-template", articleModelObject); 
                    }
                }); 
            }

            self.addArticle = function() {

                $.ajax({
                    type: 'POST',
                    url: '@Url.Content("~/Article/GetNewArticle")',
                    data: {},
                    success: function (result) {
                        //
                        // use return value as template
                        var articleModel = new ArticleModel(result);

                        //
                        // will be called after dialog initialization
                        //
                        articleModel.init = function () {
                            articleModel.validator =   $("#article-form").validate({debug : true});
                        };


                        articleModel.validate = function(){
                            var validationResult = true;
                            validationResult =  articleModel.validator.form();
                            if( ! validationResult )
                                articleModel.validator.showErrors();
                            return validationResult;
                        }

                       
                        articleModel.save = function(objectToSave) {

                            objectToSave.Notes          = escape(CKEDITOR.instances.Notes.getData()); 
                            objectToSave.assignmentId   = self.assignment.id;
                            objectToSave.PublicationID  = self.assignment.publicationId();

                            delete objectToSave.Date; 

                            $.ajax({
                                type: 'POST',
                                url: '@Url.Content("~/Article/AddArticle")',
                                data: { article: JSON.stringify(objectToSave.toObject()), assignmentID: self.assignment.id },
                                success: function (result) {
                                    if (result != null) {
                                        $('#add-new-article-link').hide();
                                        $('#view-article-link').show();                                        
                                    }
                                },
                                error: function (request, status, error) {

                                    PAGE_CONTEXT.error(request, status, error)
                                                                    }
                            });
                        }

                        var d = pageData.OpenDialog(articleModel, articleModel, "article-form-template");

                        d.dialog("option", "title", "Add Article").
                        dialog("option", "width", 860).
                        dialog("option", "height", 600);

                        CKEDITOR.replace("Notes"); 
                    },
                    error: function (request, status, error) {

                        PAGE_CONTEXT.error(request, status, error)

                    }
                });

            }

        }




//************************************ ***************************************
        var editNoteCallback = function (data) {

            try {

                var m = new TastingNoteModel(data.toObject());
                m.init = function (elements) {
                    initNoteEditForm(elements,m,'@Url.Content("~")');

                    m.validator =   $("#tasting-note-form-validation").validate(
                        {
                            debug : true,
                            rules :
                                {

                                    'note-edit-vintage': {
                                        required: true,
                                        vintage: true
                                    },

                                    'note-edit-rating': {
                                        required: false,
                                        rating: true
                                    },
                                    'note-edit-drink-from': {
                                        required : false,    
                                        range    : [2000,2400]
                                    },
                                    'note-edit-drink-to' : {
                                        required : false,
                                        range    : [2000,2400]
                                    },
                                    'note-edit-estimated-cost-low': {
                                        required: false,
                                        number: true
                                    },
                                    'note-edit-estimated-cost-high': {
                                        required: false,
                                        number: true
                                    }
                                }
                        }
                        );
                }; 


                m.validate = function(){
                    var validationResult = true;
                    validationResult =  m.validator.form();
                    if( ! validationResult )
                        m.validator.showErrors();
                    return validationResult;
                }

                //
                // load history
                //
                $.get('@Url.Content("~/TastingNote/GetNotesByWineN")', { wineN: m.wineN() },
                               function (result) {

                                   var t = ko.mapping.fromJS(
                                       { 'children': result },
                                       {
                                           'children':
                                              {
                                                  create: function (options) {
                                                      var result = new TastingNoteModel(options.data);
                                                      return result;
                                                  }
                                              }
                                       }, {});

                                   m.history(t.children());
                               });



                m.save = function (o) {


                    //
                    // activate main tab first, otherwise validation does not work properly
                    //
                    $('#tasting-note-form-validation #note-props-tab').tab('show');

                    if( !m.validate() )
                        return false;

                    /**
                     * This function call checks whether the "Date To" field is greater than the "Date From". An 
                     * error message will be displayed if this fails validation
                     */
                    /*
                    if( m.areDateRangesValid(o) == false ) {
                        $('#date-to-field-container').append('<label class="error" for="note-edit-drink-to">This is not a valid date range</label>'); 
                        return false; 
                    }
                    */

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Content("~/TastingNote/UpdateTastingNote")',
                        data:
                            {
                                str: JSON.stringify(o.toObject())
                            },
                        success: function (r) {

                            data.fromObject(r);
                            pageData.drillUp();

                        },
                        error: function (request, status, error) {


                            var dlg = pageData.OpenErrorDialog({ error: request.responseText }, null, "error-view-template");

                            dlg.dialog("option", "title", "Server Error").
                                dialog("option", "width", 600).
                                dialog("option", "height", 300);
                        }
                    });

                    return true;

                };

                m.areDateRangesValid = function(objectToSave) {

                    var dateFrom    = parseInt(objectToSave.drinkDateLo); 
                    var dateTo      = parseInt(objectToSave.drinkDateHi); 

                    if(dateTo >= dateFrom) {
                        return true; 
                    }

                    return false; 
                }

                pageData.drillDownExt("tasting-note-template-window",m,"Edit Note");

            } catch (e) {
                alert(e);

            }

        }




        function VinModel(src) {
            var self = this;



            self.wineColorLookup = [
                      { id: 0, name: '' },
                      { id: 1, name: 'Red' },
                      { id: 2, name: 'Rose' },
                      { id: 3, name: 'White' },
            ];


            self.wineDrynessLookup = [
                { id: 0, name: '' },
                { id: 1, name: 'Dry' },
                { id: 2, name: 'Medium Dry' },
                { id: 3, name: 'Sweet' },
                { id: 4, name: 'Very Dry' },
            ];



            self.wineTypeLookup = [
                { id: 0, name: '' },
                { id: 9, name: 'Table' },
                { id: 1, name: 'Dessert' },
                { id: 2, name: 'Fortified' },
                { id: 3, name: 'Madeira' },
                { id: 4, name: 'Port' },
                { id: 5, name: 'Sake' },
                { id: 6, name: 'Sherry' },
                { id: 7, name: 'Sparkling' },
                { id: 8, name: 'Sweet' }
            ];




            self.toObject = function () {
                var o = ko.mapping.toJS(self);
                return o;
            }

            self.fromObject = function (o) {
                ko.mapping.fromJS(o,
                    {

                    }, self);
            }

            //
            //
            //
            if (src)
                self.fromObject(src);



            self.coAppellation = ko.computed(function () {
                if (self.site && self.site() && self.site().length > 0) return self.site();
                if (self.locale && self.locale() && self.locale().length > 0) return self.locale();
                if (self.location && self.location() && self.location().length > 0) return self.location();
                if (self.region && self.region() && self.region().length > 0) return self.region();
                if (self.country && self.country() && self.country().length > 0) return self.country();
                return '';
            }, self);



            self.needApprove = function () {
                if (self.workflow() < 100)
                    return true;

                for (var i = 0; i < self.wines().length; i++) {
                    if (self.wines()[i].workflow() < 100) {
                        return true;
                    }
                }

                return false;
            }




    }




        var VinSearchModel = {
  
        };

        VinSearchModel.tastingEvent = null;



        VinSearchModel.newVinAndVintage = function (item) {

            var model = {};

            model.vin = new VinModel(item.toObject());
            model.vintage = "";


            model.init = function (elements) {

                model.validator = $("#new-wine-and-vintage-form-validation").validate(
                    {
                        debug: true,
                        rules:
                            {
                                'vin-edit-vintage': {
                                    required: true,
                                    vintage: true
                                }
                            }
                    }
                    );


            };

            model.validate = function () {
                var result = true;
                result = model.validator.form();
                if (!result)
                    model.validator.showErrors();
                return result;
            }

            model.save = function () {

                if (!model.validate())
                    return;

                VinSearchModel.cart.unshift(model);
                return true;
            }


            var d = pageData.OpenDialog(model, model, "new-wine-and-vintage-template");
            d.dialog("option", "title", "Create New Wine & Vintage").
                dialog("option", "width", 860).
                dialog("option", "height", 600);
            ;
        }

        VinSearchModel.editVin = function (item) {

            var m = new VinModel( item.toObject());
 
            m.init = function (elements) {
            };

            m.validate = function () {
                return true;
            }


            m.save = function (o) {

                if (!window.confirm("Do you want save changes?")) {
                    return false;
                }

                $.ajax({
                    type: 'POST',
                    url: '@Url.Content("~/vin/Update")',
                    data:
                        {
                            str: JSON.stringify(o.toObject())
                        },
                    success: function (r) {
                        if (r) {
                            VinSearchModel.search();
                        }
                    },
                    error: function (request, status, error) {
                        alert("There is an error on the server while executing this operation.\nPlease report to admin.");
                    }
                });


                return true;
            };


            var d = pageData.OpenDialog(m, m, "vin-edit-template");
            d.dialog("option", "title", "Edit Vin").
                dialog("option", "width", 860).
                dialog("option", "height", 600);
            ;
        }



        VinSearchModel.sortOrder = 0;


        VinSearchModel.sort = function () {
            if (VinSearchModel.items().length > 0) {
                //
                // producer
                if (VinSearchModel.sortOrder == 0) {


                    VinSearchModel.items(VinSearchModel.items().sort(function (l, r) {
                        return (l.producer() == r.producer()) ? (l.producer() > r.producer() ? 1 : -1) : (l.producer() > r.producer() ? 1 : -1)
                    }));
                }
                // 
                // label
                if (VinSearchModel.sortOrder == 1) {

                    VinSearchModel.items(VinSearchModel.items().sort(function (l, r) {
                        return (l.label() == r.label()) ? (l.label() > r.label() ? 1 : -1) : (l.label() > r.label() ? 1 : -1)
                    }));
                }
            }
        }

         VinSearchModel.sortBy = function (item,event) {

            if(event.originalEvent) { //user changed

                var t = $( event.currentTarget ).val();
                VinSearchModel.sortOrder = t;
                VinSearchModel.sort();

            } else { // program changed

            }
        }



        VinSearchModel.createNoteVintage = function(vin, vintage){

            VinSearchModel.cart.unshift({ vin: vin, vintage: vintage.vintage() });

        };

        /**
         * This method will enable triggering of search when the 
         * "Enter" key is pressed.
         */
        VinSearchModel.searchWithEnter = function(data, event) {

            var searchStringValue = $("#note-edit-producer-search").val();

            var message = "Please enter a search string."; 

            if ((event.keyCode == 13 || event.keyCode == "13")) {
                if ((searchStringValue == "" || searchStringValue == null) || searchStringValue == message) {
                    $("#note-edit-producer-search").val(message);
                }

                VinSearchModel.search();
            }

            return true; 
        }


        VinSearchModel.search = function(){
            //
            // do nothing at the moment
            //

            $.get('@Url.Content("~/vin/SearchWineN")', { term:  VinSearchModel.searchString() },
                                 function (result) {

                                     var t = ko.mapping.fromJS(
                                         {'children' : result}, 
                                         {'children': 
                                             {
                                                 create: function(options) {

                                                     return new VinModel(options.data);
                                                     /*
                                                     var result = {};
                                                     ko.mapping.fromJS(options.data  // source
                                                        , {}
                                                        , result    // target
                                                        );
                                                     return result;
                                                     */

                                                 }
                                             }},{} );

                                     VinSearchModel.items(t.children());
                                     VinSearchModel.sort();
                                 });
        };

        VinSearchModel.searchString = ko.observable('');
        VinSearchModel.items = ko.observableArray([]);

        VinSearchModel.cart = ko.observableArray([]);

        VinSearchModel.deleteFromCart = function (item) {
            VinSearchModel.cart.remove(item);
        }

        VinSearchModel.clearCart = function (item) {
            if (!window.confirm("Do you really want delete all notes from the cart?")) {
                return;
            }

            VinSearchModel.cart.removeAll();
        }

        VinSearchModel.cartToTastingEvent = function (item) {

            if (!window.confirm("Do you want add all notes from the cart to tasting event?")) {
                return;
            }

            var upper = VinSearchModel.cart().length;


            var te = new TastingEventModel(null);


            for (var i = 0; i < upper; i++) {

                var item = VinSearchModel.cart()[i];

                //
                // two ajax calls here. not good
                //
                te.createBareNote(VinSearchModel.tastingEvent,item.vin,item.vintage, function (r) {

                    //var m = new TastingNoteModel(r);

                    $.ajax({
                        type: 'POST',
                        url: erp.wsf_path + 'TastingNote/AddTastingNote',
                        data: {
                            str: JSON.stringify(new TastingNoteModel(r).toObject())
                            },
                        success: function (r) {
                            VinSearchModel.tastingEvent.notes.unshift(new TastingNoteModel(r));
                        },
                        error: function (request, status, error) {
                            alert('Error while saving a tasting note. Please report to admin.');
                        }
                    });


                });




            }

            VinSearchModel.cart.removeAll();
            pageData.drillUp();

        }



        // *****************************************************************************************************

        var readyForReviewNoteCallback = function (data) {

            if (!data.validate()) {
                window.alert(data.validateResult);
                return;
            }


            var state = '@EditorsCommon.WorkFlowState.READY_FOR_REVIEW';

            setNoteStateCallback(data, state);
        };


        var setDraftNoteCallback = function (data) {


            var state = '@EditorsCommon.WorkFlowState.DRAFT';

            setNoteStateCallback(data, state);

        }





        var approveNoteCallback = function (data) {

            var state = '@EditorsCommon.WorkFlowState.READY_FOR_PROOF_READ';

            setNoteStateCallback(data, state);
        };

        var sendBackNoteCallback = function (data) {
            var state = '@EditorsCommon.WorkFlowState.DRAFT';

            setNoteStateCallback(data, state);
        };

        var setNoteStateCallback = function (data, state) {

            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/TastingNote/SetTastingNoteState")',
                data:
                    { noteId: data.id, stateId: state },
                success: function (result) {

                    if (result == state) {
                        data.wfState(result);
                    }
                },
                error: function (request, status, error) {

                    var dlg = pageData.OpenErrorDialog({ error: request.responseText }, null, "error-view-template");

                    dlg.dialog("option", "title", "Server Error").
                        dialog("option", "width", 600).
                        dialog("option", "height", 300);

                }
            });

        }




        var PAGE_CONTEXT = {};

        var pageData = new PageData();

      

        //
        // do all init here
        //
        pageData.init = function () {

            PAGE_CONTEXT.publications = ko.observableArray();

            pageData.loadPublications();
        }


        pageData.loadPublications = function () {
            $.get('@Url.Content("~/ChiefEditor/Publications")', {},
            function (result) {
                PAGE_CONTEXT.publications(result);
            });

            if (typeof PAGE_CONTEXT.stateGroups === 'undefined') {
                PAGE_CONTEXT.stateGroups = [
                    {name:'ALL',id:'@EditorsCommon.WorkFlowState.STATE_GROUP_ALL'},
                    {name:'In Process',id:'@EditorsCommon.WorkFlowState.STATE_GROUP_IN_PROCESS'},
                    {name:'Published',id:'@EditorsCommon.WorkFlowState.STATE_GROUP_PUBLISHED'},
                ];
            }
        }



        TastingEventModel.prototype.createNoteFromExisting = function (tastingEvent) {

            VinSearchModel.tastingEvent = tastingEvent;

            pageData.drillDownExt("search-tasting-note-template-window", VinSearchModel, "Add Wines");
        }



        TastingNoteModel.prototype.editNote = editNoteCallback;
        TastingNoteModel.prototype.approveNote = approveNoteCallback;
        TastingNoteModel.prototype.sendBackNote = sendBackNoteCallback;

        TastingNoteModel.prototype.setReadyNote = readyForReviewNoteCallback;
        TastingNoteModel.prototype.setDraftNote = setDraftNoteCallback;

        TastingEventModel.prototype.showNotesExt = function ( assignment, item) {
            if (!item.loaded()) {
                item.showNotes(item);
            }

            item.assignment = assignment;

            if (!item.exit) {
                item.exit = function (model) {
                    model.refreshCounts();
                }
            }
            pageData.drillDownExt('tasting-event-details-template', item, item.title());
        };



        AssignmentModel.prototype.setReadyForApproval = function (item)
        {
            //alert('Approve whole assignments. Not yet implemented. Comming soon.');

            if (!window.confirm("All notes in Draft state will be sent for review.\nDo you want proceed?")) {
                return false;
            }


            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Assignment/SetTastingNoteState")',
                data:
                    { assignmentId: item.assignment.id, stateId: '@EditorsCommon.WorkFlowState.READY_FOR_REVIEW' },
                success: function (result) {
                    var top = item.assignment.events().length;
                    var notesTop = 0;
                    var te = null;
                    var note = null;

                    for (var i = 0; i < top; i++) {
                        te = item.assignment.events()[i];
                        if (te != null && te.loaded()) {


                            var notesTop = te.notes().length;
                            for (var k = 0; k < notesTop; k++) {
                                if (te.notes()[k].wfState() == '@EditorsCommon.WorkFlowState.DRAFT') {
                                    te.notes()[k].wfState('@EditorsCommon.WorkFlowState.READY_FOR_REVIEW')
                                }
                            }
                        }

                        te.draftCount(0);

                    }
                },
                error: function (request, status, error) {
                    alert("System error while executing last ooperation. Please report to admin");
 
                }
            });


        };


        IssueItemModel.prototype.AllowPrivateAssignment = function () {
            var self = this;

            return self.title().toLowerCase().localeCompare("generic assignments") == 0;

        }

        IssueItemModel.prototype.NewAssignment = function () {

            var self = this;

            $.ajax({
                type: 'POST',
                url: erp.wsf_path + 'Assignment/GetNewAssignmentForAuthor',
                data: {},
                success: function (r) {
                    //
                    // use return value as template
                    //
                    //
                    var m = new AssignmentModel(r);

                    m.issue(self.title());
                    m.issueId(self.id());
                    m.publicationId(self.publicationID());
                    m.publication(self.publicationName());


                    m.init = function (elements) {
                        m.validator = $("#assignment-edit-template-form").validate();
                    };

                    m.validate = function () {
                        var result = true;
                        result = m.validator.form();
                        if (!result) {
                            m.validator.showErrors();
                        }
                        return result;
                    }


                    m.save = function (o) {

                        if (!m.validate()) {
                            return false;
                        }


                            $.ajax({
                                type: 'POST',
                                url: '@Url.Content("~/Assignment/AddReviewerAssignment")',
                            data:
                                {
                                    str: JSON.stringify(m.toObject())
                                },
                            success: function (r) {
                                var v = new AssignmentModel(r);
                                self.assignmentList.unshift(v);
                            },
                            error: function (request, status, error) {

                                PAGE_CONTEXT.error(request, status, error)
                            }
                        });

                        return true;

                };


                var d = pageData.OpenDialog(m, m, "assignment-edit-template");
                d.dialog("option", "title", "Create New assignment");
                d.dialog("option", "height", 350);


            },
            error: function (request, status, error) {

                PAGE_CONTEXT.error(request, status, error)

            }
        });


        }





        var issueDrillDownCallback = function () {
            if (!this.loaded) {
                this.loaded = !this.loaded;

                var s = this;
                $.get('@Url.Content("~/Assignment/GetAssignmentsByIssueByReviewer")', { issueId: this.id() },
                     function (result) {

                         var t = ko.mapping.fromJS(
                                 { 'children': result },
                                 { 'children':
                                        {
                                            create: function (options) {
                                                return new AssignmentModel(options.data);
                                            }
                                        }
                                 }, {});

                         if (t.children().length == 0) {
                             alert("there are no assignments for that issue assigned to your account.");
                         }

                         s.assignmentList(t.children());
                     });

            }
            pageData.drillDownExt('issue-details-template', this, this.title());
        }

        IssueItemModel.prototype.drillDown = issueDrillDownCallback;


        //
        //
        //




        
        ko.applyBindings(pageData);

        PAGE_CONTEXT.sortByOptions = 
            [
                {name:'Producer', id : 0},
                {name:'Label', id : 1},
                {name:'Vintage', id : 2}
            ];

        PAGE_CONTEXT.sortByOptionsVin = 
            [
                {name:'Producer', id : 0},
                {name:'Label', id : 1},
            ];


        function statusColor(state)
        {
            if( state >= '@EditorsCommon.WorkFlowState.PUBLISHED' )
             return 'black';

         if (state == '@EditorsCommon.WorkFlowState.DRAFT')
             return 'red';

            if (state == '@EditorsCommon.WorkFlowState.READY_FOR_REVIEW' || state == '@EditorsCommon.WorkFlowState.READY_FOR_PROOF_READ')
             return 'orange';

         if (state == '@EditorsCommon.WorkFlowState.READY_APPROVED')
             return 'blue';

         return 'black';
     };

        function wineColor(color)
        {
            if( color == "Red" || color == "red"  )
             return 'maroon';

           if( color == "White" || color == "white"  )
             return 'white';

           if( color == "Rose" || color == "rose"  )
             return 'red';

           return 'maroon';
     };




        function statusName(state)
        {
            if( state >= '@EditorsCommon.WorkFlowState.PUBLISHED' )
                return 'Published';

            if (state == '@EditorsCommon.WorkFlowState.DRAFT')
                return 'Draft';

            if (state == '@EditorsCommon.WorkFlowState.READY_FOR_REVIEW' || state == '@EditorsCommon.WorkFlowState.READY_FOR_PROOF_READ')
                return 'Ready For Review/Approval ';

            if (state == '@EditorsCommon.WorkFlowState.READY_APPROVED')
                return 'Approved';

            return 'Unknown';
        }

     function FindItemById(id, arr) {

         try {
             for (var i = 0; i < arr.length; i++) {
                 if (arr[i].id == id) {
                     return arr[i];
                 }
             }

         } catch (e) {

         }
         return null;

     }

     //
     // commented by BB 12.17.2014. should be removed once it is confirmed that nobody is using these functions  
     //function hideSaveButtons() {
     //    $('div.btn-group').hide(); 
     //}

     //function showSaveButtons() {
     //    $('div.btn-group').show(); 
     //}

     $(document).ready(function () {
         //
         // if session expires
         //
         $(function () { 
             $(document).ajaxError(
             function (e, xhr, settings) { 

                 if (xhr.status == 401) { 
                     var newLocation = '@Url.Action("Login", "Account")';
                     window.location = newLocation; 
                 }
             });

         });

         $("#dialog-placeholder").dialog({
             autoOpen: false,
             height: 500,
             width: 800,
             modal: true,
             buttons: {
                 "Save Changes": function () {
                     if (pageData.CloseDialog()) {
                         $(this).dialog("close");
                     }
                 },
                 Cancel: function () {
                     pageData.CancelDialog();
                     $(this).dialog("close");
                 }
             },
             close: function () {
             }
         });


         $("#error-dialog-placeholder").dialog({
             autoOpen: false,
             height: 500,
             width: 800,
             modal: true,
             buttons: {
                 Close: function () {
                     pageData.CancelErrorDialog();
                     $(this).dialog("close");
                 }
             },
             close: function () {
             }
         });

         pageData.init();
         pageData.drillDownExt('issue-list-template', new IssueListUserModel('@Url.Content("~")'), "Issues");


             
         $("#page-left-menu #dashboard").addClass("active");

     });
    </script>

}
